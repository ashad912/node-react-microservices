Orders service

- userId
- status
- expiresAt
- ticketId


Creating an order to purchase the specific ticket

--

Adding version flag in ticket to track how many times the ticket was updated

---

Validation including Mongo ID recognition? Too specific?
depends

can do it as below:

custom((input: string) => {
    mongoose.Types.ObjectId.isValid(input)
})

--- 

lookup and population!

Option 1 - Embedding -> challenging to query, mixing responsibility
Option 2 - Population

Hadling population types with TS?


---

setting enum on mongoose schema property to limit possible values

---

Can query using mongoose by whole object as query param 
-> ticket: ticket. Usually done it by targeting id (??)

---

!!existingOrder -> Boolean(existingOrder)

---

There is not possibility to test handler manually, because orders service cannot create tickets!
We can test it in cluster, or create some records manually in a db :/

---

it.todo <- marking test "to-do"

---

As Stephen said DELETE keyword is not the best choice here, because we only
change status here (PATCH fits the best)
DELETE returns 204 status - No Content

---

Order Service flow

orders:created
- Tickets service needs to be told that one of its tickets has been reserved - need to lock it
- Payments service need to know there is a new order that a user mignt submit for Payments
- Expiration service needs to start a 15 minute timer to eventually time out this order

Tickets Service has tickets
Orders Service has orders and tickets
Payments has charges and orders

orders:cancelled
- Unreserving the ticket
- Reject payments


--- 
Can pass min or max of values in event - depends on strategy

---

Implementation of event listener
How to prevent concurrency issues?

- Remember about db ID consistency
- Versioning!!!


---

Skaffold may console logs not in chronological order 

---

How Mongo updates records?

- Normal -> find the record with id and set value
- Optimistic Concurrency Control -> find the record and version of X (__v by default) and set value
(just additional condition - perfect! - but applicable for updating)

(Of course updating is more issuable than creating)

Changing deafult __v key for tracking in mongoose:
-> schema.set('versionKey', 'yournewkey')

When should we increment or include the "version" number of a record with an event?

Increment the "version" number whenever the primary service responsible
for a record emits an event to describe a create/update/destroy to a record

--- 
Using versioning mongoose plugin in different services it's a bit cheating, because there is no abstraction here

What if there is different schema from different db?

Replacing mongoose-update-if-current by own implementation!!

Two steps:
- Updates the version number on records before they are saved
- Customizes the find-and-update operation (save) to look for the correct version


--- 

Accessing DB in K8s cluster (orders example)

-> kubectl exec -it orders-mongo-depl-[some_id] mongo
-> show dbs
-> user orders
-> db.tickets
-> db.tickets.find({ price: 2000 })
...

Coool!

---

Strategies for locking a ticket

-> providing orderId related to ticket
-> its presence saying if it is locked or not


---

Updating one's service ticket copy requires emitting event about update to sync other services!

Emitting orders:created or cancelled changes version of ticket
Everything is fine until, that would be necesssary to emit ticket:update
In this situtaion the orders copy of the ticket has old version and just refuses to process this update

---

If used optional field in TS and the field was set:
-> to "unset" set as undefined not null to avoid additional "type-work"