CI/CD 

How to manage a project?

CI - classic one
CD - deploy code from GitHub to K8s cluster

Using MonoRepo

To add past submodule "common" folder:

-> git rm --cached ticketing-app\common 

GitHub Actions

build -> uses: actions/checkout@v2 
<- uses all code of the project

npm run test:ci <- it is required to close the session after tests are done!
test:ci = jest <- jest by default does it

running test for different services in parallel!

but let's think about selection - tests related to a specific service!

--
We are going to use Digital Option

kubectl -> docker desktop context -> Local Cluster
        -> digital ocean context -> Digital Ocean Cluster

DO:
- Create a cluster
- Download doctl
- Create token at DO
- Auth by "doctl auth init" command

Get connecion info for our new cluster:
- doctl kubernetes cluster kubeconfig save [cluster_name]

List all contexts:
- kubectl config view

-> Current context is seen at "current-context" field
-> My contexts: do-fra1-ticketing, minikube

Use a different context:
- kubectl config use-context [context_name]

We are going to connect GitHub Actions workflow with DO K8s cluster
Creting separate workflow deployment for each service

---

GitHub Container
doctl -> context -> kubectl --->

Digital Ocean
---> Our Cluster

1. Install doctl, use API key
2. Fetching context
3. Feed context into kubectl already preinstalled on GitHub 

Reminder - restarting deployment:
- kubectl rollout restart deployment [name_of_depl]

---

Our infra - ingress-srv uses "ticketing.dev"
Since we are deploying the app to Internet we need adjust this 
We can use dev/prod name here using manifest files

k8s folder - either dev or prod
k8s-dev folder - only dev
k8s-prod folder - only prod

---

Adding secrets to DO cluster

-> Make sure that use appropriate context (kubectl config use-context do-fra1-ticketing)
-> Run "kubectl create secret ..." command for JWT_KEY and STRIPE_KEY from command line ofc

---

WE HAD TO REMEBER TO INSTALL ingress-nginx ADD-ON ON OUR GITHUB kubectl !!!
-> Go to official "ingress-nginx" webpage and get link for appropriate (DO) deployment
-> kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.1/deploy/static/provider/do/deploy.yaml

gco master = git checkout master :OOO

---

Remember when debugging:

-> kubectl describe pod [pod_name]
-> kubectl logs [pod_name]

---

DO automatically made Load Balancer when creating the K8s cluster

We have three nodes

Load Balancer has an external ip assigned by DO 
If we browse it, we'll see nginx html error site

---

Buying domain

namecheap.com
ticketingbyashad.xyz

Setting custom DNS to:

ns1.digitalocean.com
ns2.digitalocean.com
ns3.digitalocean.com

Read more about DNS!!!

At DO:

Adding domain
Configuring A tab with "@" as hostname and choose appropriate Load Balancer
Configuring CNAME tab with "www" as hostname and "@" as "is an alias of"
In both cases setting TTL (Time to live) on 30 seconds